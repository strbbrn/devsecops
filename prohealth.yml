name: Promote/Rollback with Health Check

on:
  workflow_call:
    inputs:
      site:
        required: true
        type: string
      branch:
        required: true
        type: string
      mode:
        required: false
        type: string
      requestor:
        required: true
        type: string
      operation:
        required: true
        type: string
      site_registration_id:
        required: true
        type: string

jobs:
  promotion_api:
    name: "Promotion/Rollback for ${{ inputs.branch }}"
    runs-on: self-hosted
    env:
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_PORT: ${{ secrets.DB_PORT }}
    environment: ${{ inputs.branch }}
    steps:
      - name: Install PostgreSQL Client
        run: |
          sudo apt-get update
          sudo apt-get install postgresql-client -y

      - name: Retrieve seqno from DB
        run: |
          export PGPASSWORD="${{ env.DB_PASSWORD }}"
          seqno=$(psql -h ${{ env.DB_HOST }} \
                       -U ${{ env.DB_USER }} \
                       -d ${{ env.DB_NAME }} \
                       -p ${{ env.DB_PORT }} \
                       -t -c "SELECT seqno FROM schema.table_name ORDER BY seqno DESC LIMIT 1;")
          seqno=$(echo $seqno | xargs)
          echo "Retrieved seqno: $seqno"
          
          branch_action=${{ inputs.branch }}
          if [ "${{ inputs.branch }}" == "stage" ]; then
            site_action_cd="PROMOTE_STAGE"
          elif [ "${{ inputs.branch }}" == "prod" ]; then
            site_action_cd="PROMOTE_PRODUCTION"
          fi

          new_seq_no=$(psql -h ${{ env.DB_HOST }} \
               -U ${{ env.DB_USER }} \
               -d ${{ env.DB_NAME }} \
               -p ${{ env.DB_PORT }} \
               -t \
               --quiet \
               -c "INSERT INTO schema.table_name(seqno, rgs_id, site_action_cd, requestor, auto_promote, stage_env_cd, deploy_sts_cd, dt_deploy_started, created_by, created_date) VALUES (nextval('schema.MY_SEQNO'), ${{ inputs.site_registration_id }}, '$site_action_cd', '${{ inputs.requestor }}', 'N', '${branch_action^^}', 'REQUESTED', CURRENT_DATE, '${{ inputs.requestor }}', CURRENT_DATE) RETURNING seqno;" | awk '{print $1}')
          echo "New seqno: $new_seq_no"
          echo "SEQNO=$new_seq_no" >> $GITHUB_ENV

      - name: Obtain Access Token
        run: |
          if [ "${{ inputs.branch }}" == "dev" ]; then
            oauth_client_id="${{ secrets.OAUTH_CLIENT_ID_DEV }}"
            oauth_client_secret="${{ secrets.OAUTH_CLIENT_SECRET_DEV }}"
          elif [ "${{ inputs.branch }}" == "prod" ]; then
            oauth_client_id="${{ secrets.OAUTH_CLIENT_ID_PROD }}"
            oauth_client_secret="${{ secrets.OAUTH_CLIENT_SECRET_PROD }}"
          fi

          response=$(curl -s -X POST "https://abc.com/as/token.oauth2" \
            -d "grant_type=client_credentials" \
            -d "client_id=$oauth_client_id" \
            -d "client_secret=$oauth_client_secret")

          echo "OAuth response: $response"

          access_token=$(echo "$response" | jq -r '.access_token')

          echo "Access Token: $access_token"
          echo "ACCESS_TOKEN=$access_token" >> "$GITHUB_ENV"

      - name: Determine Version Based on Operation
        run: |
          if [ "${{ inputs.operation }}" == "promote" ]; then
            version="new"
            if [ "${{ inputs.branch }}" == "stage" ]; then
              comment="Promote new version from Test to Stage"
            elif [ "${{ inputs.branch }}" == "prod" ]; then
              comment="Promote new version from Test to Production"
            fi
          elif [ "${{ inputs.operation }}" == "rollback" ]; then
            if [ "${{ inputs.branch }}" == "dev" ]; then
              promotion_status_url="https://dev.abc.com/api/status/${{ inputs.site }}/${{ inputs.branch }}/"
            elif [ "${{ inputs.branch }}" == "prod" ]; then
              promotion_status_url="https://prod.abc.com/api/status/${{ inputs.site }}/${{ inputs.branch }}/"
            fi

            status_response=$(curl --location -k --request GET "$promotion_status_url")
            echo "Status API response: $status_response"

            current_target=$(echo "$status_response" | jq -r '.[] | select(.name=="current") | .target')
            lower_valid_target=$(echo "$status_response" | jq -r '.[] | select(.status=="valid" and .name < "'$current_target'") | .name' | sort -r | head -n 1)

            if [ -n "$lower_valid_target" ]; then
              version=$lower_valid_target
            else
              echo "No valid previous target found for rollback"
              exit 1
            fi

            if [ "${{ inputs.branch }}" == "stage" ]; then
              comment="Rollback Stage version $version"
            elif [ "${{ inputs.branch }}" == "prod" ]; then
              comment="Rollback Production version $version"
            fi
          else
            echo "Invalid operation: ${{ inputs.operation }}"
            exit 1
          fi

          echo "VERSION=$version" >> "$GITHUB_ENV"
          echo "COMMENT=$comment" >> "$GITHUB_ENV"

      - name: Promotion/Rollback
        run: |
          if [ "${{ inputs.branch }}" == "dev" ]; then
            start_url="https://dev.abc.com/api/job/start"
          elif [ "${{ inputs.branch }}" == "prod" ]; then
            start_url="https://prod.abc.com/api/job/start"
          fi

          response=$(curl --location -k --request POST "$start_url" \
            -d "site=${{ inputs.site }}" \
            -d "branch=${{ inputs.branch }}" \
            -d "requestor=${{ inputs.requestor }}" \
            -d "version=${{ env.VERSION }}" \
            -d "operation=${{ inputs.operation }}" \
            -d "mode=${{ inputs.mode }}" \
            -d "access_token=${{ env.ACCESS_TOKEN }}")
          
          echo "API response: $response"

          api_status=$(echo "$response" | jq -r '.status')
          if [ "$api_status" == "success" ]; then
            api_version=$(echo "$response" | jq -r '.message' | grep -oP '\d+' | sed -n 2p)
          fi

          echo "Version: $api_version"
          echo "Status: $api_status"
          echo "API_VERSION=$api_version" >> $GITHUB_ENV
          echo "API_STATUS=$api_status" >> $GITHUB_ENV

      - name: Update Record in Database
        run: |
          export PGPASSWORD="${{ env.DB_PASSWORD }}"

          if [ "$API_STATUS" == "success" ]; then
            deploy_sts_cd="SUCCESS"
          else
            deploy_sts_cd="FAILURE"
          fi

          psql -h ${{ env.DB_HOST }} \
               -U ${{ env.DB_USER }} \
               -d ${{ env.DB_NAME }} \
               -p ${{ env.DB_PORT }} \
               -c "UPDATE schema.table_name SET deploy_sts_cd='$deploy_sts_cd', modified_by='${{ inputs.requestor }}', modified_date=CURRENT_DATE, comments='${{ env.COMMENT}}', dt_deploy_completed=CURRENT_DATE WHERE seqno=${{ env.SEQNO }};" 

      - name: Waiting for site to stabilize
        run: |
          echo "Waiting for site to stabilize"
          sleep 5m
